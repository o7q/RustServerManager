using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Timers;
using System.Windows.Forms;
using System.Diagnostics;

using static RustServerManager.Data.Config.ConfigManager;
using static RustServerManager.Data.Config.ConfigStructure;
using static RustServerManager.Tools.Forms;
using static RustServerManager.Tools.Processing.ProcessTools;
using static RustServerManager.Tools.Shell.ShellTools;
using static RustServerManager.Tools.Server.RustDedicatedProcess;
using System.Net;


namespace RustServerManager
{
    public partial class MainMenu : Form
    {
        public static ConfigBase CONFIG = new ConfigBase();

        public MainMenu()
        {
            InitializeComponent();
        }

        private void MainMenu_Load(object sender, EventArgs e)
        {
            if (!File.Exists("steamcmd.exe"))
            {
                DialogResult prompt = MessageBox.Show("steamcmd was not found!\nDo you want RustServerManager to download it automatically?", "", MessageBoxButtons.YesNo);

                if (prompt == DialogResult.Yes)
                {
                    try
                    {
                        using (var client = new WebClient())
                            client.DownloadFile("https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip", "steamcmd.zip");

                        ZipFile.ExtractToDirectory("steamcmd.zip", ".\\");
                        File.Delete("steamcmd.zip");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("An error occured! It can be seen below:\n\n" + ex);
                    }
                }

                if (prompt == DialogResult.No)
                    Environment.Exit(0);
            }

            if (File.Exists("RustServerManager.dat"))
            {
                CONFIG = ReadConfig("RustServerManager.dat");

                ForceInstallDirTextBox.Text = CONFIG.STEAMCMD_FORCE_INSTALL_DIR;

                ServerIdentityTextBox.Text = CONFIG.SERVER_IDENTITY;
                ServerSeedTextBox.Text = CONFIG.SERVER_SEED;
                RandomServerSeedCheckBox.Checked = CONFIG.SERVER_SEED_RANDOM_ENABLE;
                ServerArgumentsTextBox.Text = CONFIG.SERVER_ARGUMENTS;

                WipeDayComboBox.Text = CONFIG.WIPE_TIME_DAY;
                WipeHourTextBox.Text = CONFIG.WIPE_TIME_HOUR.ToString();
                WipeMinuteTextBox.Text = CONFIG.WIPE_TIME_MINUTE.ToString();
                WipeTimeIdentifierComboBox.Text = CONFIG.WIPE_TIME_IDENTIFIER;

                StartFromSundayCheckBox.Checked = CONFIG.WIPE_TIME_START_FROM_SUNDAY;

                switch (CONFIG.WIPE_TIME_INTERVAL)
                {
                    case "WEEKLY":
                        WeeklyRadioButton.Checked = true;
                        break;

                    case "BIWEEKLY":
                        BiWeeklyRadioButton.Checked = true;
                        break;

                    case "MONTHLY":
                        MonthlyRadioButton.Checked = true;
                        break;
                }

                WipeBlueprintsCheckBox.Checked = CONFIG.WIPE_BLUEPRINTS_ENABLE;

                BackupPreviousCheckBox.Checked = CONFIG.BACKUP_BEFORE_WIPE_ENABLE;

                AutoRestartCheckBox.Checked = CONFIG.SERVER_AUTO_RESTART_ENABLE;
            }
            else
            {
                BackupPreviousCheckBox.Checked = true;
                AutoRestartCheckBox.Checked = true;

                CONFIG.WIPE_DATETIME_SHOULD_UPDATE = true;
            }

            System.Timers.Timer dedicatedServerScanner = new System.Timers.Timer();
            dedicatedServerScanner.Elapsed += new ElapsedEventHandler(ScanDedicatedServer);
            dedicatedServerScanner.Interval = 1000;
            dedicatedServerScanner.Enabled = true;

            if (IsProcessRunning("RustDedicated"))
                UpdateWipeTimer();
        }

        private bool serverShouldAutoStart = false;
        private bool serverIsRunning = false;
        private void ScanDedicatedServer(object source, ElapsedEventArgs e)
        {
            if (IsProcessRunning("RustDedicated") || IsProcessRunning("steamcmd"))
            {
                serverIsRunning = true;
            }
            else
            {
                serverIsRunning = false;
            }

            if (AutoRestartCheckBox.Checked && serverShouldAutoStart && !serverIsRunning)
            {
                StartRustDedicated();
            }
        }

        private void WipeServerButton_Click(object sender, EventArgs e)
        {
            serverShouldAutoStart = false;

            PerformWipe(null);
        }

        private void PerformWipe(Action completionCallback)
        {
            StopRustDedicated(true);

            WipeFiles(WipeBlueprintsCheckBox.Checked);
            UpdateRandomServerSeed();

            completionCallback?.Invoke();
        }

        private void StartRustDedicated()
        {
            if (IsProcessRunning("RustDedicated") || IsProcessRunning("steamcmd"))
                return;

            UpdateWipeTimer();

            ProcessStartInfo command = new ProcessStartInfo();
            Invoke((MethodInvoker)delegate
            {
                command.Arguments = "/c title RustServerManager - Server Identity: \"" + ServerIdentityTextBox.Text + "\" - Server Seed: \"" + ServerSeedTextBox.Text + "\" & " +
                                "steamcmd.exe +force_install_dir \"" + ForceInstallDirTextBox.Text + "\" +login anonymous +app_update 258550 +quit & " +
                                " cd \"" + ForceInstallDirTextBox.Text + "\" & " +
                                "RustDedicated.exe -batchmode +server.identity " + ServerIdentityTextBox.Text + " " + ServerArgumentsTextBox.Text + " +server.seed " + ServerSeedTextBox.Text;
                command.FileName = "cmd.exe";
            });
            Process.Start(command);
        }

        private void WipeFiles(bool wipeBlueprints)
        {
            if (BackupPreviousCheckBox.Checked)
            {
                Directory.CreateDirectory(ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text + "_Backups");

                string zipFilePath = ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text + "_Backups\\" + ServerIdentityTextBox.Text + "_" + DateTime.Now.ToString("M-d-yyyy_hh-mm-ss-tt").ToUpper() + ".zip";
                if (!File.Exists(zipFilePath))
                    ZipFile.CreateFromDirectory(ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text, zipFilePath);
            }

            foreach (string file in Directory.GetFiles(ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text))
            {
                bool shouldDeleteCurrentFile = true;

                if (file.Contains("player.blueprints") && !wipeBlueprints)
                    shouldDeleteCurrentFile = false;

                if (shouldDeleteCurrentFile)
                    File.Delete(file);
            }

            foreach (string directory in Directory.GetDirectories(ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text))
            {
                Directory.Delete(directory, true);
            }
        }

        private void StartServerButton_Click(object sender, EventArgs e)
        {
            if (IsProcessRunning("RustDedicated") || IsProcessRunning("steamcmd"))
            {
                MessageBox.Show("A Rust dedicated server is already running!");
                return;
            }

            StartRustDedicated();

            serverShouldAutoStart = true;
        }

        private void UpdateWipeTimer()
        {
            if (CONFIG.WIPE_DATETIME_SHOULD_UPDATE)
                UpdateNextWipeDate();

            CONFIG.WIPE_DATETIME_SHOULD_UPDATE = false;

            // calculate the delay duration until the target date and time
            TimeSpan delay = CONFIG.WIPE_DATETIME - DateTime.Now;

            if (delay.TotalMilliseconds > 0)
            {
                // create a timer with the delay duration
                System.Timers.Timer timer = new System.Timers.Timer(delay.TotalMilliseconds);
                timer.Elapsed += (sender, e) =>
                {
                    timer.Stop();
                    // wait for wipe to finish before starting the server
                    PerformWipe(() =>
                    {
                        StartRustDedicated();
                        CONFIG.WIPE_DATETIME_SHOULD_UPDATE = true;
                        UpdateWipeTimer();
                    });
                };
                timer.Start();
            }
        }

        private void UpdateNextWipeDate()
        {
            // get current date
            DateTime currentDate = DateTime.Today;

            if (StartFromSundayCheckBox.Checked)
            {
                // calculate the difference in days between the current day and previous sunday
                int daysUntilTargetDay = ((int)DayOfWeek.Sunday - (int)currentDate.DayOfWeek + 7) % 7;

                // subtract the difference to find the previous sunday
                currentDate = currentDate.AddDays(-daysUntilTargetDay);
            }

            DateTime nextDate = currentDate;

            if (WeeklyRadioButton.Checked)
            {
                nextDate = currentDate.AddDays(7);
            }
            else if (BiWeeklyRadioButton.Checked)
            {
                nextDate = currentDate.AddDays(14);
            }
            else if (MonthlyRadioButton.Checked)
            {
                nextDate = currentDate.AddMonths(1);
            }

            if (nextDate == null)
                return;

            DayOfWeek dayOfWeek = DayOfWeek.Monday;

            Invoke((MethodInvoker)delegate
            {
                switch (WipeDayComboBox.Text)
                {
                    case "Mon":
                        dayOfWeek = DayOfWeek.Monday;
                        break;

                    case "Tues":
                        dayOfWeek = DayOfWeek.Tuesday;
                        break;

                    case "Wed":
                        dayOfWeek = DayOfWeek.Wednesday;
                        break;

                    case "Thurs":
                        dayOfWeek = DayOfWeek.Thursday;
                        break;

                    case "Fri":
                        dayOfWeek = DayOfWeek.Friday;
                        break;

                    case "Sat":
                        dayOfWeek = DayOfWeek.Saturday;
                        break;

                    case "Sun":
                        dayOfWeek = DayOfWeek.Sunday;
                        break;
                }

                // find the next specified day
                while (nextDate.DayOfWeek != dayOfWeek)
                {
                    nextDate = nextDate.AddDays(1);
                }

                nextDate = nextDate.AddHours(int.Parse(WipeHourTextBox.Text));

                if (WipeTimeIdentifierComboBox.Text == "PM")
                    nextDate = nextDate.AddHours(12);

                nextDate = nextDate.AddMinutes(int.Parse(WipeMinuteTextBox.Text));
            });

            CONFIG.WIPE_DATETIME = nextDate;
        }

        private void MainMenu_FormClosing(object sender, FormClosingEventArgs e)
        {
            CONFIG.STEAMCMD_FORCE_INSTALL_DIR = ForceInstallDirTextBox.Text;

            CONFIG.SERVER_IDENTITY = ServerIdentityTextBox.Text;
            CONFIG.SERVER_SEED = ServerSeedTextBox.Text;
            CONFIG.SERVER_SEED_RANDOM_ENABLE = RandomServerSeedCheckBox.Checked;
            CONFIG.SERVER_ARGUMENTS = ServerArgumentsTextBox.Text;

            CONFIG.WIPE_TIME_DAY = WipeDayComboBox.Text;
            int.TryParse(WipeHourTextBox.Text, out CONFIG.WIPE_TIME_HOUR);
            int.TryParse(WipeMinuteTextBox.Text, out CONFIG.WIPE_TIME_MINUTE);
            CONFIG.WIPE_TIME_IDENTIFIER = WipeTimeIdentifierComboBox.Text;

            CONFIG.WIPE_TIME_START_FROM_SUNDAY = StartFromSundayCheckBox.Checked;

            if (WeeklyRadioButton.Checked)
            {
                CONFIG.WIPE_TIME_INTERVAL = "WEEKLY";
            }
            else if (BiWeeklyRadioButton.Checked)
            {
                CONFIG.WIPE_TIME_INTERVAL = "BIWEEKLY";
            }
            else if (MonthlyRadioButton.Checked)
            {
                CONFIG.WIPE_TIME_INTERVAL = "MONTHLY";
            }

            CONFIG.WIPE_BLUEPRINTS_ENABLE = WipeBlueprintsCheckBox.Checked;

            CONFIG.BACKUP_BEFORE_WIPE_ENABLE = BackupPreviousCheckBox.Checked;

            CONFIG.SERVER_AUTO_RESTART_ENABLE = AutoRestartCheckBox.Checked;

            WriteConfig(CONFIG, "RustServerManager.dat");
        }

        private void RandomServerSeedCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            ServerSeedTextBox.Enabled = !RandomServerSeedCheckBox.Checked;

            if (RandomServerSeedCheckBox.Checked)
            {
                UpdateRandomServerSeed();
            }
        }

        private void UpdateRandomServerSeed()
        {
            Random random = new Random(Guid.NewGuid().GetHashCode());
            try
            {
                ServerSeedTextBox.Invoke((MethodInvoker)delegate
                {
                    ServerSeedTextBox.Text = random.Next(0, int.MaxValue).ToString();
                });
            }
            catch { }
        }

        private void ServerSeedTextBox_TextChanged(object sender, EventArgs e)
        {
            CurrentServerSeedLabel.Text = "Current Seed: " + ServerSeedTextBox.Text;
        }

        private void CurrentServerSeedLabel_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(ServerSeedTextBox.Text);
        }

        private void StopServerButton_Click(object sender, EventArgs e)
        {
            serverShouldAutoStart = false;

            StopRustDedicated(false);
        }

        private void ForceInstallDirBrowseButton_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog selectFolderDialog = new OpenFileDialog())
            {
                selectFolderDialog.Multiselect = false;
                selectFolderDialog.CheckFileExists = false;
                selectFolderDialog.CheckPathExists = true;
                selectFolderDialog.FileName = "Select a folder";
                selectFolderDialog.Filter = "Directories|Folders";
                selectFolderDialog.ShowDialog();

                if (selectFolderDialog.FileName != "Select a folder" && selectFolderDialog.FileName != null)
                {
                    string folderPath = Path.GetDirectoryName(selectFolderDialog.FileName);
                    ForceInstallDirTextBox.Text = folderPath;
                }
            }
        }

        private void CloseButton_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void MinimizeButton_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private void TitlebarPanel_MouseDown(object sender, MouseEventArgs e)
        {
            MoveForm(Handle, e);
        }

        private void RestartServerButton_Click(object sender, EventArgs e)
        {
            if (!IsProcessRunning("RustDedicated") && !IsProcessRunning("steamcmd"))
            {
                MessageBox.Show("A Rust dedicated server is not running!");
                return;
            }

            StopRustDedicated(false);

            serverShouldAutoStart = true;
        }

        private void OpenServerPathButton_Click(object sender, EventArgs e)
        {
            Process.Start("explorer.exe", ForceInstallDirTextBox.Text + "\\server\\" + ServerIdentityTextBox.Text);
        }
    }
}